{"version":3,"sources":["angularApp.js"],"names":["app","angular","module","controller","$scope","posts","auth","test","isLoggedIn","currentUser","addPost","title","create","link","author","incrementUpvotes","post","upvote","logOut","addComment","body","_id","success","comment","comments","push","upvoteComment","$state","user","register","error","then","go","logIn","factory","$http","o","upvotes","getAll","get","data","copy","id","res","headers","Authorization","getToken","put","$window","saveToken","token","localStorage","payload","JSON","parse","atob","split","exp","Date","now","username","removeItem","config","$stateProvider","$urlRouterProvider","state","url","templateUrl","resolve","postPromise","$stateParams","onEnter","otherwise"],"mappings":"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","file":"main.min.js","sourcesContent":["//TODO: modularize app.js\n\nvar app = angular.module('meanThinkster', ['ui.router']); // initialization needs a dependencies list -- must be omitted when just referencing\n\napp.controller(\"MainCtrl\", [\n    '$scope',\n    'posts',\n    'auth',\n    function($scope, posts, auth){\n        $scope.test = \"The Angular part is working!\";\n        $scope.posts = posts.posts;\n        $scope.isLoggedIn = auth.isLoggedIn;\n        $scope.currentUser = auth.currentUser();\n\n        $scope.addPost = function(){\n            if (!$scope.title || $scope.title === '') { return; }\n            posts.create({\n                title: $scope.title,\n                link: $scope.link,\n                author: auth.currentUser(),\n            });\n            $scope.title = '';\n            $scope.link = '';\n        };\n        $scope.incrementUpvotes = function(post){\n            posts.upvote(post);\n        };\n    }\n]);\n\napp.controller(\"NavCtrl\", [\n    '$scope',\n    'auth',\n    function($scope, auth) {\n        $scope.isLoggedIn = auth.isLoggedIn;\n        $scope.currentUser = auth.currentUser();\n        $scope.logOut = auth.logOut;\n    }\n]);\n\napp.controller('PostsCtrl', [\n    '$scope',\n    'posts',\n    'post',\n    'auth',\n    function($scope, posts, post, auth) {\n        $scope.post = post;\n        $scope.isLoggedIn = auth.isLoggedIn;\n\n        $scope.addComment = function(){\n            if($scope.body === '') { return; }\n\n            posts.addComment(post._id, {\n                body: $scope.body,\n                // author: auth.currentUser(),\n            }).success(function(comment) {\n                $scope.post.comments.push(comment);\n            });\n\n            $scope.body = '';\n        };\n        $scope.incrementUpvotes = function(comment){\n            posts.upvoteComment(post, comment);\n        };\n    }\n]);\n\napp.controller('AuthCtrl', [\n    '$scope',\n    '$state',\n    'auth',\n    function($scope, $state, auth) {\n        $scope.user = {};\n\n        $scope.register = function() {\n            auth.register($scope.user).error(function(error) {\n                $scope.error = error;\n            }).then(function() {\n                $state.go('home');\n            });\n        };\n\n        $scope.logIn = function() {\n            auth.logIn($scope.user).error(function(error) {\n                $scope.error = error;\n            }).then(function() {\n                $state.go('home');\n            });\n        };\n    }\n]);\n\napp.factory('posts', ['$http', 'auth', function($http, auth){\n    var o = {\n        posts: [\n            {title: 'post 1', upvotes: 5, comments: []},\n            {title: 'post 2', upvotes: 2, comments: []},\n            {title: 'post 3', upvotes: 15, comments: []},\n            {title: 'post 4', upvotes: 9, comments: []},\n            {title: 'post 5', upvotes: 4, comments: []}\n        ]\n    };\n\n    o.getAll = function() {\n        return $http.get('/posts')\n            .success(function(data) {\n                angular.copy(data, o.posts);\n            });\n    };\n\n    o.get = function(id) {\n        return $http.get('/posts/' + id).then(function(res) {\n            return res.data;\n        });\n    };\n\n    o.create = function(post) {\n        return $http.post('/posts', post, {\n            headers: {Authorization: 'Bearer '+auth.getToken()}\n        })\n            .success(function(data) {\n                o.posts.push(data);\n            });\n    };\n\n    o.upvote = function(post) {\n        return $http.put('/posts/' + post._id + '/upvote', null, {\n            headers: {Authorization: 'Bearer '+auth.getToken()}\n        })\n            .success(function(data) {\n                post.upvotes += 1;\n            });\n    };\n\n    o.addComment = function(id, comment) {\n        return $http.post('/posts/' + id + '/comments', comment, {\n            headers: {Authorization: 'Bearer '+auth.getToken()}\n        });\n    };\n\n    o.upvoteComment = function(post, comment) {\n        return $http.put('/posts/' + post._id + '/comments/' + comment._id + '/upvote', null, {\n            headers: {Authorization: 'Bearer '+auth.getToken()}\n        })\n            .success(function(data){\n                comment.upvotes += 1;\n            });\n    };\n\n    return o;\n}]);\n\napp.factory('auth', ['$http', '$window', function($http, $window) {\n    var auth = {};\n\n    auth.saveToken = function(token) {\n        $window.localStorage['mean-thinkster-token'] = token;\n    };\n\n    auth.getToken = function() {\n        return $window.localStorage['mean-thinkster-token'];\n    };\n\n    auth.isLoggedIn = function() {\n        var token = auth.getToken();\n\n        if (token) {\n            var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n            return payload.exp > Date.now() / 1000;\n        } else {\n            return false;\n        }\n    };\n\n    auth.currentUser = function() {\n        if (auth.isLoggedIn()) {\n            var token = auth.getToken();\n            var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n            return payload.username;\n        }\n    };\n\n    auth.register = function(user) {\n        return $http.post('/register', user).success(function(data) {\n            auth.saveToken(data.token);\n        });\n    };\n\n    auth.logIn = function(user) {\n        return $http.post('/login', user).success(function(data) {\n            auth.saveToken(data.token);\n        });\n    };\n\n    auth.logOut = function(user) {\n        $window.localStorage.removeItem('mean-thinkster-token');\n    };\n\n    return auth;\n}]);\n\napp.config([\n    '$stateProvider',\n    '$urlRouterProvider',\n    function($stateProvider, $urlRouterProvider){\n        $stateProvider\n            .state('home', {\n                url: '/home',\n                templateUrl: '/home.html',\n                controller: 'MainCtrl',\n                resolve: {\n                    postPromise: ['posts', function(posts){\n                        return posts.getAll();\n                    }]\n                }\n            })\n            .state('posts', {\n                url: '/posts/{id}',\n                templateUrl: '/posts.html',\n                controller: 'PostsCtrl',\n                resolve: {\n                    post: ['$stateParams', 'posts', function($stateParams, posts) {\n                        return posts.get($stateParams.id);\n                    }]\n                }\n            })\n\n            .state('login', {\n                url: '/login',\n                templateUrl: '/login.html',\n                controller: 'AuthCtrl',\n                onEnter: ['$state', 'auth', function($state, auth) {\n                    if (auth.isLoggedIn()) {\n                        $state.go('home');\n                    }\n                }]\n            })\n\n            .state('register', {\n                url: '/register',\n                templateUrl: '/register.html',\n                controller: 'AuthCtrl',\n                onEnter: ['$state', 'auth', function($state, auth) {\n                    if (auth.isLoggedIn()) {\n                        $state.go('home');\n                    }\n                }]\n            });\n        $urlRouterProvider.otherwise('home');\n    }\n]);"],"sourceRoot":"/source/"}